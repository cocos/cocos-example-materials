  #include <common/math/number>
  out vec4 v_matWorldInverse0;
  out vec4 v_matWorldInverse1;
  out vec4 v_matWorldInverse2;
  out vec4 v_matWorldInverse3;
  out vec3 v_localNormal;

  #define CC_SURFACES_VERTEX_MODIFY_SHADOW_BIAS
  vec2 SurfacesVertexModifyShadowBias(in SurfacesStandardVertexIntermediate In, vec2 originShadowBias)
  {
    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);
    mat4 mat = transpose(matWorldIT);
    v_matWorldInverse0 = mat[0];
    v_matWorldInverse1 = mat[1];
    v_matWorldInverse2 = mat[2];
    v_matWorldInverse3 = mat[3];
    v_localNormal = normalize(In.normal);

    return originShadowBias + vec2(emissiveScaleParam.z, 0.0);
  }

  #define CC_SURFACES_VERTEX_MODIFY_UV
  void SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)
  {
    In.texCoord = In.texCoord * tilingOffset.xy + tilingOffset.zw;
  #if CC_SURFACES_USE_SECOND_UV
    In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;
  #endif
  }
